<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://amrhmorsy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://amrhmorsy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-30T21:24:17+00:00</updated><id>https://amrhmorsy.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Rendering Spheres in C++ and OpenGL</title><link href="https://amrhmorsy.github.io/2023/12/07/post-bibliography.html" rel="alternate" type="text/html" title="Rendering Spheres in C++ and OpenGL"/><published>2023-12-07T04:00:00+00:00</published><updated>2023-12-07T04:00:00+00:00</updated><id>https://amrhmorsy.github.io/2023/12/07/post-bibliography</id><content type="html" xml:base="https://amrhmorsy.github.io/2023/12/07/post-bibliography.html"><![CDATA[<p>By definition, a sphere is a 3D surface, where every vertex on the sphere is at the same distance from a given point. This given point is called the centre of the sphere, and this distance is called the radius of the sphere.</p> <p>The equation of a sphere is:</p> <div align="center"><b>$$ (x+c_x)^2 + (y+c_y)^2 + (z+c_z)^2 = r^2 $$</b></div> <p><br/> where r is the radius of the sphere, and C is the centre of the sphere.</p> <p>To render a sphere in OpenGL, we need vertices. There are infinite number of vertices in a sphere. We cannot render all of them. Instead, we will only render a limited number of vertices. <br/></p> <p>To sample these vertices, we will divide the sphere into sectors and stacks. <br/><br/></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/1-1400.webp"/> <img src="/assets/img/1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <p>The points of intersection between each stack and each sector will be the sample vertices we will render, as shown below. <br/><br/></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2-1400.webp"/> <img src="/assets/img/2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/> The higher the number of sectors and stacks, the higher the number of sampled vertices and the more detailed the rendered sphere is.</p> <p>The vertex v can be computed by using parametric equations with the corresponding sector angle s and stack angle t. <br/><br/></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/4-1400.webp"/> <img src="/assets/img/4.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/> But, before we can compute v, we, first, have to compute the sector angle s and the stack angle t.</p> <p>We know that the sector angles ranges from 0 to 360 degrees. We also know that the stack angle ranges from -90 to 90 degrees. Hence, the sector angle s and the stack angle t at each step can be calculated as follows: <br/><br/></p> <div align="center"><b>$$ s = 2*ùùÖ * (Sector Index/Number of Sectors) $$</b></div> <div align="center"><b>$$ t = (ùùÖ/2) - (ùùÖ*Stack Index/Number of Stacks) $$</b></div> <p><br/></p> <p>Using the sector angle s and the stack angle t, we can calculate the vertex v using the following equations: <br/><br/></p> <div align="center"><b>$$ V.x = r * cos(t) * cos(s) $$</b></div> <div align="center"><b>$$ V.y = r * cos(t) * sin(s) $$</b></div> <div align="center"><b>$$ V.z = r * sin(t) $$</b></div> <p><br/></p> <p>Now that we have the vertices data, the only thing remaining is to triangulate adjacent vertices to form triangles.</p> <p>As shown below, each sector in a stack will consists of two triangles: ( V1 - V2 - V1+1 ) and ( V1+1 - V2 - V2+1 ). The only exceptions are the top (first) and the bottom (last) stacks: They will consist of only one triangle.</p> <p>Using this triangulation pattern, we can form the indices data that instructs OpenGL the indices of the vertices that form each triangle of the sphere. <br/><br/></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/8-1400.webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <hr/> <p><br/> The following is a C++ function that generates the vertices of the sphere. <br/><br/></p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">generate_sphere_vertices</span><span class="p">(</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">int</span> <span class="n">number_of_sectors</span><span class="p">,</span> <span class="kt">int</span> <span class="n">number_of_stacks</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">number_of_stacks</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">){</span>
        <span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">i</span> <span class="o">*</span> <span class="p">(</span><span class="n">M_PI</span> <span class="o">/</span> <span class="n">number_of_stacks</span><span class="p">)</span> <span class="p">;</span>
        <span class="kt">float</span> <span class="n">z</span> <span class="o">=</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">sinf</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">number_of_sectors</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">float</span> <span class="n">s</span> <span class="o">=</span> <span class="n">j</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="n">number_of_sectors</span><span class="p">)</span> <span class="p">;</span>
            <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">cosf</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="n">cosf</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">;</span>
            <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">cosf</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="n">sinf</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">;</span>
            <span class="n">vertices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">;</span>
            <span class="n">vertices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="p">;</span>
            <span class="n">vertices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">vertices</span> <span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p><br/> The following is a C++ function that generates the indices of the sphere. <br/><br/></p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">generate_sphere_indices</span><span class="p">(</span> <span class="kt">int</span> <span class="n">number_of_sectors</span><span class="p">,</span> <span class="kt">int</span> <span class="n">number_of_stacks</span> <span class="p">)</span> 
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">indices</span> <span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">number_of_stacks</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">){</span>
        <span class="kt">int</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="p">(</span><span class="n">number_of_sectors</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">;</span>
        <span class="kt">int</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">v1</span> <span class="o">+</span> <span class="n">number_of_sectors</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">;</span>
        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">number_of_sectors</span> <span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span> <span class="p">;</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span> <span class="p">;</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">;</span> 
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="p">(</span><span class="n">number_of_stacks</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)){</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">;</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span> <span class="p">;</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">;</span>
            <span class="p">}</span>
            <span class="n">v1</span><span class="o">++</span> <span class="p">;</span> 
            <span class="n">v2</span><span class="o">++</span> <span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">indices</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p><br/></p> <p>The following is the complete implementation to render a rotating sphere using C++ and OpenGL. <br/><br/></p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;GL/glew.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;GLFW/glfw3.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;glm/glm.hpp&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;glm/gtc/matrix_transform.hpp&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;glm/gtc/type_ptr.hpp&gt;</span><span class="cp">
</span>

<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">get_vertex_shader_source</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span>
    <span class="s">"#version 330 core </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"in vec3 position; </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"uniform mat4 model ; </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"uniform mat4 view ; </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"uniform mat4 projection ; </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"void main() { </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"    gl_Position = projection * view * model * vec4(position, 1.0); </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"} </span><span class="se">\n</span><span class="s">"</span> <span class="p">;</span>
<span class="p">}</span>

<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">get_fragment_shader_source</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span>
    <span class="s">"#version 330 core </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"out vec4 outColor; </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"void main() { </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"    outColor = vec4(1.0, 0.0, 0.0, 1.0); </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"} </span><span class="se">\n</span><span class="s">"</span> <span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">generate_sphere_indices</span><span class="p">(</span> <span class="kt">int</span> <span class="n">number_of_sectors</span><span class="p">,</span> <span class="kt">int</span> <span class="n">number_of_stacks</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">indices</span> <span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">number_of_stacks</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">){</span>
        <span class="kt">int</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="p">(</span><span class="n">number_of_sectors</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">;</span>
        <span class="kt">int</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">v1</span> <span class="o">+</span> <span class="n">number_of_sectors</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">;</span>
        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">number_of_sectors</span> <span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v1</span><span class="p">)</span> <span class="p">;</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span> <span class="p">;</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="p">(</span><span class="n">number_of_stacks</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)){</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">;</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span> <span class="p">;</span>
                <span class="n">indices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">v2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">;</span>
            <span class="p">}</span>
            <span class="n">v1</span><span class="o">++</span> <span class="p">;</span>
            <span class="n">v2</span><span class="o">++</span> <span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">indices</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">generate_sphere_vertices</span><span class="p">(</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">int</span> <span class="n">number_of_sectors</span><span class="p">,</span> <span class="kt">int</span> <span class="n">number_of_stacks</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">vertices</span> <span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">number_of_stacks</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">){</span>
        <span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">i</span> <span class="o">*</span> <span class="p">(</span><span class="n">M_PI</span> <span class="o">/</span> <span class="n">number_of_stacks</span><span class="p">)</span> <span class="p">;</span>
        <span class="kt">float</span> <span class="n">z</span> <span class="o">=</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">sinf</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">number_of_sectors</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">float</span> <span class="n">s</span> <span class="o">=</span> <span class="n">j</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">M_PI</span> <span class="o">/</span> <span class="n">number_of_sectors</span><span class="p">)</span> <span class="p">;</span>
            <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">cosf</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="n">cosf</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">;</span>
            <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">cosf</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="n">sinf</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">;</span>
            <span class="n">vertices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">;</span>
            <span class="n">vertices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="p">;</span>
            <span class="n">vertices</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">vertices</span> <span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">success</span> <span class="p">;</span>
    <span class="kt">char</span> <span class="n">infoLog</span><span class="p">[</span><span class="mi">512</span><span class="p">]</span> <span class="p">;</span>

    <span class="c1">// Initialize GLFW</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">glfwInit</span><span class="p">()){</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Failed to initialize GLFW"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Customize Window Parameters</span>
    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_CONTEXT_VERSION_MAJOR</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_CONTEXT_VERSION_MINOR</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_OPENGL_PROFILE</span><span class="p">,</span> <span class="n">GLFW_OPENGL_CORE_PROFILE</span><span class="p">);</span>
    <span class="n">glfwWindowHint</span><span class="p">(</span><span class="n">GLFW_OPENGL_FORWARD_COMPAT</span><span class="p">,</span> <span class="n">GL_TRUE</span><span class="p">)</span> <span class="p">;</span>

    <span class="c1">// Create Window</span>
    <span class="n">GLFWwindow</span><span class="o">*</span> <span class="n">window</span> <span class="o">=</span> <span class="n">glfwCreateWindow</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="s">"OpenGL Sphere"</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">window</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Failed to create GLFW window"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">glfwTerminate</span><span class="p">();</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">glfwMakeContextCurrent</span><span class="p">(</span><span class="n">window</span><span class="p">);</span>

    <span class="c1">// Initialize GLEW</span>
    <span class="n">glewExperimental</span> <span class="o">=</span> <span class="n">GL_TRUE</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">glewInit</span><span class="p">()</span> <span class="o">!=</span> <span class="n">GLEW_OK</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Failed to initialize GLEW"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Compile Vertex Shader</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">vertex_shader_source</span> <span class="o">=</span> <span class="n">get_vertex_shader_source</span><span class="p">()</span> <span class="p">;</span>
    <span class="n">GLuint</span> <span class="n">vertexShader</span> <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span><span class="n">GL_VERTEX_SHADER</span><span class="p">)</span> <span class="p">;</span>
    <span class="n">glShaderSource</span><span class="p">(</span><span class="n">vertexShader</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vertex_shader_source</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">;</span>
    <span class="n">glCompileShader</span><span class="p">(</span><span class="n">vertexShader</span><span class="p">)</span> <span class="p">;</span>
    
    <span class="c1">// Check for Compilation Errors</span>
    <span class="n">glGetShaderiv</span><span class="p">(</span><span class="n">vertexShader</span><span class="p">,</span> <span class="n">GL_COMPILE_STATUS</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">success</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">){</span>
        <span class="n">glGetShaderInfoLog</span><span class="p">(</span><span class="n">vertexShader</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">infoLog</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERROR::SHADER::VERTEX::COMPILATION_FAILED</span><span class="se">\n</span><span class="s">"</span> <span class="o">&lt;&lt;</span> <span class="n">infoLog</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Compile Fragment Shader</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">fragment_shader_source</span> <span class="o">=</span> <span class="n">get_fragment_shader_source</span><span class="p">()</span> <span class="p">;</span>
    <span class="n">GLuint</span> <span class="n">fragmentShader</span> <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span><span class="n">GL_FRAGMENT_SHADER</span><span class="p">);</span>
    <span class="n">glShaderSource</span><span class="p">(</span><span class="n">fragmentShader</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fragment_shader_source</span><span class="p">,</span> <span class="nb">nullptr</span><span class="p">);</span>
    <span class="n">glCompileShader</span><span class="p">(</span><span class="n">fragmentShader</span><span class="p">);</span>

    <span class="c1">// Check for Compilation Errors</span>
    <span class="n">glGetShaderiv</span><span class="p">(</span><span class="n">fragmentShader</span><span class="p">,</span> <span class="n">GL_COMPILE_STATUS</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">success</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">){</span>
        <span class="n">glGetShaderInfoLog</span><span class="p">(</span><span class="n">fragmentShader</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">infoLog</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERROR::SHADER::VERTEX::COMPILATION_FAILED</span><span class="se">\n</span><span class="s">"</span> <span class="o">&lt;&lt;</span> <span class="n">infoLog</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Link the vertex and fragment shader into a shader program</span>
    <span class="n">GLuint</span> <span class="n">shaderProgram</span> <span class="o">=</span> <span class="n">glCreateProgram</span><span class="p">();</span>
    <span class="n">glAttachShader</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="n">vertexShader</span><span class="p">);</span>
    <span class="n">glAttachShader</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="n">fragmentShader</span><span class="p">);</span>
    <span class="n">glBindFragDataLocation</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"outColor"</span><span class="p">);</span>
    <span class="n">glLinkProgram</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">);</span>
    <span class="n">glUseProgram</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">)</span> <span class="p">;</span>

    <span class="c1">// check for linking errors</span>
    <span class="n">glGetProgramiv</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="n">GL_LINK_STATUS</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">success</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">glGetProgramInfoLog</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">infoLog</span><span class="p">);</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"ERROR::SHADER::PROGRAM::LINKING_FAILED</span><span class="se">\n</span><span class="s">"</span> <span class="o">&lt;&lt;</span> <span class="n">infoLog</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Define Projection Matrix</span>
    <span class="n">glm</span><span class="o">::</span><span class="n">mat4</span> <span class="n">projection</span> <span class="o">=</span> <span class="n">glm</span><span class="o">::</span><span class="n">perspective</span><span class="p">(</span><span class="n">glm</span><span class="o">::</span><span class="n">radians</span><span class="p">(</span><span class="mf">45.0</span><span class="n">f</span><span class="p">),</span> <span class="mf">800.0</span><span class="n">f</span> <span class="o">/</span> <span class="mf">600.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.1</span><span class="n">f</span><span class="p">,</span> <span class="mf">100.0</span><span class="n">f</span><span class="p">)</span> <span class="p">;</span>

    <span class="c1">// Define View Matrix</span>
    <span class="n">glm</span><span class="o">::</span><span class="n">mat4</span> <span class="n">view</span> <span class="o">=</span> <span class="n">glm</span><span class="o">::</span><span class="n">lookAt</span><span class="p">(</span> <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span> <span class="p">;</span>

    <span class="c1">// Upload View and Projection Matrix</span>
    <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">glGetUniformLocation</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="s">"projection"</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">GL_FALSE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">projection</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="p">;</span>
    <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">glGetUniformLocation</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="s">"view"</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">GL_FALSE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">view</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="p">;</span>

    <span class="c1">// Create VAO</span>
    <span class="n">GLuint</span> <span class="n">vao</span><span class="p">;</span>
    <span class="n">glGenVertexArrays</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vao</span><span class="p">);</span>
    <span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">vao</span><span class="p">);</span>

    <span class="c1">// Create VBO and EBO</span>
    <span class="n">GLuint</span> <span class="n">vbo</span><span class="p">,</span> <span class="n">ebo</span><span class="p">;</span>
    <span class="n">glGenBuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vbo</span><span class="p">);</span>
    <span class="n">glGenBuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ebo</span><span class="p">);</span>

    <span class="c1">// Generate Sphere Vertices</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">vertices</span> <span class="o">=</span> <span class="n">generate_sphere_vertices</span><span class="p">(</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">18</span><span class="p">);</span>

    <span class="c1">// Generate Sphere Indices</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">indices</span> <span class="o">=</span> <span class="n">generate_sphere_indices</span><span class="p">(</span><span class="mi">36</span><span class="p">,</span> <span class="mi">18</span><span class="p">);</span>

    <span class="c1">// Store Vertex Data in VBO</span>
    <span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span> <span class="n">vbo</span><span class="p">);</span>
    <span class="n">glBufferData</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span> <span class="n">vertices</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">*</span> <span class="nf">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">),</span> <span class="n">vertices</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">GL_STATIC_DRAW</span><span class="p">);</span>

    <span class="c1">// Store Indices Data in EBO</span>
    <span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ELEMENT_ARRAY_BUFFER</span><span class="p">,</span> <span class="n">ebo</span><span class="p">);</span>
    <span class="n">glBufferData</span><span class="p">(</span><span class="n">GL_ELEMENT_ARRAY_BUFFER</span><span class="p">,</span> <span class="n">indices</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">*</span> <span class="nf">sizeof</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">),</span> <span class="n">indices</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">GL_STATIC_DRAW</span><span class="p">);</span>

    <span class="c1">// Specify the layout of the vertex data</span>
    <span class="n">GLint</span> <span class="n">posAttrib</span> <span class="o">=</span> <span class="n">glGetAttribLocation</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="s">"position"</span><span class="p">);</span>
    <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span> <span class="n">GL_FALSE</span><span class="p">,</span> <span class="mi">3</span> <span class="o">*</span> <span class="nf">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">),</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">;</span>

    <span class="c1">// Main Game Loop</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">glfwWindowShouldClose</span><span class="p">(</span><span class="n">window</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="c1">// Clear the screen to black</span>
        <span class="n">glClearColor</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">);</span>
        <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">);</span>

        <span class="c1">// Set Model Matrix</span>
        <span class="kt">float</span> <span class="n">timeValue</span> <span class="o">=</span> <span class="n">glfwGetTime</span><span class="p">()</span> <span class="p">;</span>
        <span class="kt">float</span> <span class="n">angle</span> <span class="o">=</span> <span class="n">timeValue</span> <span class="o">*</span> <span class="n">glm</span><span class="o">::</span><span class="n">radians</span><span class="p">(</span><span class="mf">50.0</span><span class="n">f</span><span class="p">)</span> <span class="p">;</span>
        <span class="n">glm</span><span class="o">::</span><span class="n">mat4</span> <span class="n">model</span> <span class="o">=</span> <span class="n">glm</span><span class="o">::</span><span class="n">rotate</span><span class="p">(</span><span class="n">glm</span><span class="o">::</span><span class="n">mat4</span><span class="p">(</span><span class="mf">1.0</span><span class="n">f</span><span class="p">),</span> <span class="n">angle</span><span class="p">,</span> <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">))</span> <span class="p">;</span>
        <span class="n">glUniformMatrix4fv</span><span class="p">(</span><span class="n">glGetUniformLocation</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">,</span> <span class="s">"model"</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">GL_FALSE</span><span class="p">,</span> <span class="n">glm</span><span class="o">::</span><span class="n">value_ptr</span><span class="p">(</span><span class="n">model</span><span class="p">))</span> <span class="p">;</span>

        <span class="c1">// Draw a sphere</span>
        <span class="n">glDrawElements</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">,</span> <span class="n">indices</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">GL_UNSIGNED_INT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

        <span class="c1">// Swap buffers and poll for and process events</span>
        <span class="n">glfwSwapBuffers</span><span class="p">(</span><span class="n">window</span><span class="p">);</span>
        <span class="n">glfwPollEvents</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Delete Shaders</span>
    <span class="n">glDeleteProgram</span><span class="p">(</span><span class="n">shaderProgram</span><span class="p">);</span>
    <span class="n">glDeleteShader</span><span class="p">(</span><span class="n">fragmentShader</span><span class="p">);</span>
    <span class="n">glDeleteShader</span><span class="p">(</span><span class="n">vertexShader</span><span class="p">);</span>

    <span class="c1">// Delete Buffers</span>
    <span class="n">glDeleteBuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vbo</span><span class="p">);</span>
    <span class="n">glDeleteBuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ebo</span><span class="p">);</span>

    <span class="c1">// Delete VAO</span>
    <span class="n">glDeleteVertexArrays</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vao</span><span class="p">);</span>

    <span class="c1">// Terminat GLFW</span>
    <span class="n">glfwTerminate</span><span class="p">()</span> <span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p><br/></p> <p>If you run the code, you will get the following results:</p> <p><br/></p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/9-1400.webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <p>Thank you for reading !</p>]]></content><author><name></name></author><summary type="html"><![CDATA[By definition, a sphere is a 3D surface, where every vertex on the sphere is at the same distance from a given point. This given point is called the centre of the sphere, and this distance is called the radius of the sphere.]]></summary></entry></feed>