<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://amrhmorsy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://amrhmorsy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-28T20:32:46+00:00</updated><id>https://amrhmorsy.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Reflection Vector Calculation</title><link href="https://amrhmorsy.github.io/blog/2024/code/" rel="alternate" type="text/html" title="Reflection Vector Calculation"/><published>2024-10-28T12:00:00+00:00</published><updated>2024-10-28T12:00:00+00:00</updated><id>https://amrhmorsy.github.io/blog/2024/code</id><content type="html" xml:base="https://amrhmorsy.github.io/blog/2024/code/"><![CDATA[<p>About a month ago, I was interviewed for a graphics programmer position. Among the questions asked was how to calculate the reflection vector of an incident light ray on a surface. Unfortunately, I was a bit nervous during the interview and couldn’t think clearly, so I couldn’t answer the question. Unsurprisingly, I didn’t get the position.</p> <p>Ironically, the solution came to mind shortly after the interview. I took some time to review the math behind it again and decided to write a blog post to break it down.</p> <p>In this post, I’ll explain the mathematics of calculating the reflection vector given an incident light vector on a surface. Let \(L\) be the incident light vector at an angle \(\theta\) from the normal, \(N\), of the surface, and R be the reflection vector of \(L\).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Diagram1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Diagram1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Diagram1-1400.webp"/> <img src="/assets/img/Diagram1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The law of reflection states that the angle of incidence is equal to the angle of reflection. Thus, we know that the reflection angle is also \(\theta\) from the normal, \(N\)</p> <p>Suppose \(N\) and \(L\) are normalized to unit length.</p> <p>Each vector has both parallel and perpendicular components relative to \(N\).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Diagram2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Diagram2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Diagram2-1400.webp"/> <img src="/assets/img/Diagram2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The parallel component of \(L\) along \(N\) is:</p> \[L_{||} = (L.N)N\] <p>Alternatively, this can be expressed as \(N cos \theta\)</p> <p>The perpendicular component of \(L\) along \(N\) is:</p> \[L_⊥ = L - (L.N)N\] <p>To compute \(R\), we reverse the parallel component of \(L\) along \(N\) and keep the perpendicular component unchanged:</p> \[R = L_⊥ - L_{||} = L - (L.N)N - (L.N)N = L - 2 (L.N)N\] <p>Here’s the C++ code using the GLM library:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">glm</span><span class="o">::</span><span class="n">vec3</span> <span class="nf">compute_reflection_vector</span><span class="p">(</span> <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span> <span class="n">L</span><span class="p">,</span> <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span> <span class="n">N</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">N</span> <span class="o">=</span> <span class="n">glm</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="p">;</span>
    <span class="n">L</span> <span class="o">=</span> <span class="n">glm</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="p">;</span>

    <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span> <span class="n">R</span> <span class="o">=</span> <span class="n">L</span> <span class="o">-</span> <span class="mf">2.0</span><span class="n">f</span> <span class="o">*</span> <span class="n">glm</span><span class="o">::</span><span class="n">dot</span><span class="p">(</span> <span class="n">L</span><span class="p">,</span> <span class="n">N</span> <span class="p">)</span> <span class="o">*</span> <span class="n">N</span> <span class="p">;</span>

    <span class="k">return</span> <span class="n">R</span> <span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[About a month ago, I was interviewed for a graphics programmer position. Among the questions asked was how to calculate the reflection vector of an incident light ray on a surface. Unfortunately, I was a bit nervous during the interview and couldn’t think clearly, so I couldn’t answer the question. Unsurprisingly, I didn’t get the position.]]></summary></entry></feed>